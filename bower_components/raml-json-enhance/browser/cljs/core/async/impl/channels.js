goog.provide("cljs.core.async.impl.channels"),goog.require("cljs.core"),goog.require("cljs.core.async.impl.protocols"),goog.require("cljs.core.async.impl.dispatch"),goog.require("cljs.core.async.impl.buffers"),cljs.core.async.impl.channels.box=function c(l){return void 0!==cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596||(cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596=function(c,l,n){this.box=c,this.val=l,this.meta20597=n,this.cljs$lang$protocol_mask$partition0$=425984,this.cljs$lang$protocol_mask$partition1$=0},cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.prototype.cljs$core$IWithMeta$_with_meta$arity$2=function(c,l){var n=this;return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596(n.box,n.val,l)},cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.prototype.cljs$core$IMeta$_meta$arity$1=function(c){var l=this;return l.meta20597},cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.prototype.cljs$core$IDeref$_deref$arity$1=function(c){var l=this;return l.val},cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.getBasis=function(){return new cljs.core.PersistentVector(null,3,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.with_meta(cljs.core.cst$sym$box,new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null,1,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.cst$sym$val],null)))],null)),cljs.core.cst$sym$val,cljs.core.cst$sym$meta20597],null)},cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.cljs$lang$type=!0,cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.cljs$lang$ctorStr="cljs.core.async.impl.channels/t_cljs$core$async$impl$channels20596",cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596.cljs$lang$ctorPrWriter=function(c,l,n){return cljs.core._write(l,"cljs.core.async.impl.channels/t_cljs$core$async$impl$channels20596")},cljs.core.async.impl.channels.__GT_t_cljs$core$async$impl$channels20596=function(c,l,n){return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596(c,l,n)}),new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels20596(c,l,cljs.core.PersistentArrayMap.EMPTY)},cljs.core.async.impl.channels.PutBox=function(c,l){this.handler=c,this.val=l},cljs.core.async.impl.channels.PutBox.getBasis=function(){return new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.cst$sym$handler,cljs.core.cst$sym$val],null)},cljs.core.async.impl.channels.PutBox.cljs$lang$type=!0,cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr="cljs.core.async.impl.channels/PutBox",cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter=function(c,l,n){return cljs.core._write(l,"cljs.core.async.impl.channels/PutBox")},cljs.core.async.impl.channels.__GT_PutBox=function(c,l){return new cljs.core.async.impl.channels.PutBox(c,l)},cljs.core.async.impl.channels.put_active_QMARK_=function(c){return cljs.core.async.impl.protocols.active_QMARK_(c.handler)},cljs.core.async.impl.channels.MAX_DIRTY=64,cljs.core.async.impl.channels.MMC=function(){},cljs.core.async.impl.channels.abort=function(c){if(null!=c&&null!=c.cljs$core$async$impl$channels$MMC$abort$arity$1)return c.cljs$core$async$impl$channels$MMC$abort$arity$1(c);var l=null==c?null:c,n=cljs.core.async.impl.channels.abort[goog.typeOf(l)];if(null!=n)return n.cljs$core$IFn$_invoke$arity$1?n.cljs$core$IFn$_invoke$arity$1(c):n.call(null,c);var r=cljs.core.async.impl.channels.abort._;if(null!=r)return r.cljs$core$IFn$_invoke$arity$1?r.cljs$core$IFn$_invoke$arity$1(c):r.call(null,c);throw cljs.core.missing_protocol("MMC.abort",c)},cljs.core.async.impl.channels.ManyToManyChannel=function(c,l,n,r,s,e,o){this.takes=c,this.dirty_takes=l,this.puts=n,this.dirty_puts=r,this.buf=s,this.closed=e,this.add_BANG_=o},cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$=!0,cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1=function(c){for(var l=this,n=this;;){var r=l.puts.pop();if(null==r);else{var s=r.handler;r.val;if(!s.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null))continue;var e=s.cljs$core$async$impl$protocols$Handler$commit$arity$1(null);cljs.core.async.impl.dispatch.run(function(c,l,n,r,s){return function(){return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(!0):c.call(null,!0)}}(e))}break}return l.puts.cleanup(cljs.core.constantly(!1)),cljs.core.async.impl.protocols.close_BANG_(n)},cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$=!0,cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3=function(c,l,n){var r=this,s=this;if(null==l)throw new Error([cljs.core.str("Assert failed: "),cljs.core.str("Can't put nil in on a channel"),cljs.core.str("\n"),cljs.core.str("(not (nil? val))")].join(""));var e=r.closed;if(e||!n.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null))return cljs.core.async.impl.channels.box(!e);if(cljs.core.truth_(function(){var c=r.buf;return cljs.core.truth_(c)?cljs.core.not(r.buf.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(null)):c}())){n.cljs$core$async$impl$protocols$Handler$commit$arity$1(null);for(var o=cljs.core.reduced_QMARK_(r.add_BANG_.cljs$core$IFn$_invoke$arity$2?r.add_BANG_.cljs$core$IFn$_invoke$arity$2(r.buf,l):r.add_BANG_.call(null,r.buf,l));;){if(r.takes.length>0&&cljs.core.count(r.buf)>0){var a=r.takes.pop();if(!a.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null))continue;var t=a.cljs$core$async$impl$protocols$Handler$commit$arity$1(null),$=r.buf.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(null);cljs.core.async.impl.dispatch.run(function(c,l,n,r,s,e){return function(){return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(l):c.call(null,l)}}(t,$))}break}return o&&cljs.core.async.impl.channels.abort(s),cljs.core.async.impl.channels.box(!0)}var i=function(){for(;;){var c=r.takes.pop();{if(!cljs.core.truth_(c))return null;if(cljs.core.truth_(c.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null)))return c}}}();if(cljs.core.truth_(i)){var u=cljs.core.async.impl.protocols.commit(i);return n.cljs$core$async$impl$protocols$Handler$commit$arity$1(null),cljs.core.async.impl.dispatch.run(function(c,n,r,s){return function(){return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(l):c.call(null,l)}}(u)),cljs.core.async.impl.channels.box(!0)}if(r.dirty_puts>cljs.core.async.impl.channels.MAX_DIRTY?(r.dirty_puts=0,r.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_)):r.dirty_puts=r.dirty_puts+1,cljs.core.truth_(n.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(null))){if(!(r.puts.length<cljs.core.async.impl.protocols.MAX_QUEUE_SIZE))throw new Error([cljs.core.str("Assert failed: "),cljs.core.str([cljs.core.str("No more than "),cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE),cljs.core.str(" pending puts are allowed on a single channel."),cljs.core.str(" Consider using a windowed buffer.")].join("")),cljs.core.str("\n"),cljs.core.str("(< (.-length puts) impl/MAX-QUEUE-SIZE)")].join(""));r.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(n,l))}return null},cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$=!0,cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2=function(c,l){var n=this,r=this;if(l.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null)){if(null!=n.buf&&cljs.core.count(n.buf)>0){for(var s=(l.cljs$core$async$impl$protocols$Handler$commit$arity$1(null),cljs.core.async.impl.channels.box(n.buf.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(null)));;){if(cljs.core.truth_(n.buf.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(null)));else{var e=n.puts.pop();if(null!=e){var o=e.handler,a=e.val;if(o.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null)){var t=o.cljs$core$async$impl$protocols$Handler$commit$arity$1(null);l.cljs$core$async$impl$protocols$Handler$commit$arity$1(null),cljs.core.async.impl.dispatch.run(function(c,l,n,r,s,e,o){return function(){return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(!0):c.call(null,!0)}}(t)),cljs.core.reduced_QMARK_(n.add_BANG_.cljs$core$IFn$_invoke$arity$2?n.add_BANG_.cljs$core$IFn$_invoke$arity$2(n.buf,a):n.add_BANG_.call(null,n.buf,a))&&cljs.core.async.impl.channels.abort(r)}continue}}break}return s}var $=function(){for(;;){var c=n.puts.pop();{if(!cljs.core.truth_(c))return null;if(cljs.core.async.impl.protocols.active_QMARK_(c.handler))return c}}}();if(cljs.core.truth_($)){var i=cljs.core.async.impl.protocols.commit($.handler);return l.cljs$core$async$impl$protocols$Handler$commit$arity$1(null),cljs.core.async.impl.dispatch.run(function(c,l,n){return function(){return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(!0):c.call(null,!0)}}(i)),cljs.core.async.impl.channels.box($.val)}if(cljs.core.truth_(n.closed)){if(cljs.core.truth_(n.buf)&&(n.add_BANG_.cljs$core$IFn$_invoke$arity$1?n.add_BANG_.cljs$core$IFn$_invoke$arity$1(n.buf):n.add_BANG_.call(null,n.buf)),cljs.core.truth_(function(){var c=l.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null);return cljs.core.truth_(c)?l.cljs$core$async$impl$protocols$Handler$commit$arity$1(null):c}())){var u=function(){var c=n.buf;return cljs.core.truth_(c)?cljs.core.count(n.buf)>0:c}(),y=cljs.core.truth_(u)?n.buf.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(null):null;return cljs.core.async.impl.channels.box(y)}return null}if(n.dirty_takes>cljs.core.async.impl.channels.MAX_DIRTY?(n.dirty_takes=0,n.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_)):n.dirty_takes=n.dirty_takes+1,cljs.core.truth_(l.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(null))){if(!(n.takes.length<cljs.core.async.impl.protocols.MAX_QUEUE_SIZE))throw new Error([cljs.core.str("Assert failed: "),cljs.core.str([cljs.core.str("No more than "),cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE),cljs.core.str(" pending takes are allowed on a single channel.")].join("")),cljs.core.str("\n"),cljs.core.str("(< (.-length takes) impl/MAX-QUEUE-SIZE)")].join(""));n.takes.unbounded_unshift(l)}return null}return null},cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$=!0,cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1=function(c){var l=this;return l.closed},cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1=function(c){var l=this;if(l.closed)return null;for(l.closed=!0,cljs.core.truth_(function(){var c=l.buf;return cljs.core.truth_(c)?0===l.puts.length:c}())&&(l.add_BANG_.cljs$core$IFn$_invoke$arity$1?l.add_BANG_.cljs$core$IFn$_invoke$arity$1(l.buf):l.add_BANG_.call(null,l.buf));;){var n=l.takes.pop();{if(null==n)break;if(n.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(null)){var r=n.cljs$core$async$impl$protocols$Handler$commit$arity$1(null),s=cljs.core.truth_(function(){var c=l.buf;return cljs.core.truth_(c)?cljs.core.count(l.buf)>0:c}())?l.buf.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(null):null;cljs.core.async.impl.dispatch.run(function(c,l,n,r){return function(){return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(l):c.call(null,l)}}(r,s))}}}return cljs.core.truth_(l.buf)&&l.buf.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(null),null},cljs.core.async.impl.channels.ManyToManyChannel.getBasis=function(){return new cljs.core.PersistentVector(null,7,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.cst$sym$takes,cljs.core.with_meta(cljs.core.cst$sym$dirty_DASH_takes,new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$mutable,!0],null)),cljs.core.cst$sym$puts,cljs.core.with_meta(cljs.core.cst$sym$dirty_DASH_puts,new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$mutable,!0],null)),cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native],null)),cljs.core.with_meta(cljs.core.cst$sym$closed,new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$mutable,!0],null)),cljs.core.cst$sym$add_BANG_],null)},cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type=!0,cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr="cljs.core.async.impl.channels/ManyToManyChannel",cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter=function(c,l,n){return cljs.core._write(l,"cljs.core.async.impl.channels/ManyToManyChannel")},cljs.core.async.impl.channels.__GT_ManyToManyChannel=function(c,l,n,r,s,e,o){return new cljs.core.async.impl.channels.ManyToManyChannel(c,l,n,r,s,e,o)},cljs.core.async.impl.channels.ex_handler=function(c){return console.log(c),null},cljs.core.async.impl.channels.handle=function(c,l,n){var r=function(){var c=l;return cljs.core.truth_(c)?c:cljs.core.async.impl.channels.ex_handler}().call(null,n);return null==r?c:cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(c,r)},cljs.core.async.impl.channels.chan=function(c){for(var l=[],n=arguments.length,r=0;;){if(!(r<n))break;l.push(arguments[r]);r=r+1}switch(l.length){case 1:return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);case 3:return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0],arguments[1],arguments[2]);default:throw new Error([cljs.core.str("Invalid arity: "),cljs.core.str(l.length)].join(""))}},cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1=function(c){return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(c,null)},cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2=function(c,l){return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(c,l,null)},cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3=function(c,l,n){return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer(32),0,cljs.core.async.impl.buffers.ring_buffer(32),0,c,!1,function(){var c=cljs.core.truth_(l)?l.cljs$core$IFn$_invoke$arity$1?l.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.add_BANG_):l.call(null,cljs.core.async.impl.protocols.add_BANG_):cljs.core.async.impl.protocols.add_BANG_;return function(c){return function(){var l=null,r=function(l){try{return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(l):c.call(null,l)}catch(c){var r=c;return cljs.core.async.impl.channels.handle(l,n,r)}},s=function(l,r){try{return c.cljs$core$IFn$_invoke$arity$2?c.cljs$core$IFn$_invoke$arity$2(l,r):c.call(null,l,r)}catch(c){var s=c;return cljs.core.async.impl.channels.handle(l,n,s)}};return l=function(c,l){switch(arguments.length){case 1:return r.call(this,c);case 2:return s.call(this,c,l)}throw new Error("Invalid arity: "+arguments.length)},l.cljs$core$IFn$_invoke$arity$1=r,l.cljs$core$IFn$_invoke$arity$2=s,l}()}(c)}())},cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity=3;