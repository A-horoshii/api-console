goog.provide("clojure.walk"),goog.require("cljs.core"),clojure.walk.walk=function(r,c,e){if(cljs.core.list_QMARK_(e)){var l=cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.list,cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,e));return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(l):c.call(null,l)}if(cljs.core.seq_QMARK_(e)){var $=cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,e));return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1($):c.call(null,$)}if(cljs.core.record_QMARK_(e)){var n=cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(c,e){return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(c,r.cljs$core$IFn$_invoke$arity$1?r.cljs$core$IFn$_invoke$arity$1(e):r.call(null,e))},e,e);return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(n):c.call(null,n)}if(cljs.core.coll_QMARK_(e)){var o=cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(e),cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,e));return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(o):c.call(null,o)}return c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(e):c.call(null,e)},clojure.walk.postwalk=function r(c,e){return clojure.walk.walk(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,c),c,e)},clojure.walk.prewalk=function r(c,e){return clojure.walk.walk(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,c),cljs.core.identity,c.cljs$core$IFn$_invoke$arity$1?c.cljs$core$IFn$_invoke$arity$1(e):c.call(null,e))},clojure.walk.keywordize_keys=function(r){var c=function(r){var c=r,e=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(c,0,null),l=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(c,1,null);return"string"==typeof e?new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(e),l],null):new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[e,l],null)};return clojure.walk.postwalk(function(r){return function(c){return cljs.core.map_QMARK_(c)?cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,c)):c}}(c),r)},clojure.walk.stringify_keys=function(r){var c=function(r){var c=r,e=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(c,0,null),l=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(c,1,null);return e instanceof cljs.core.Keyword?new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.name(e),l],null):new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[e,l],null)};return clojure.walk.postwalk(function(r){return function(c){return cljs.core.map_QMARK_(c)?cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,c)):c}}(c),r)},clojure.walk.prewalk_replace=function(r,c){return clojure.walk.prewalk(function(c){return cljs.core.contains_QMARK_(r,c)?r.cljs$core$IFn$_invoke$arity$1?r.cljs$core$IFn$_invoke$arity$1(c):r.call(null,c):c},c)},clojure.walk.postwalk_replace=function(r,c){return clojure.walk.postwalk(function(c){return cljs.core.contains_QMARK_(r,c)?r.cljs$core$IFn$_invoke$arity$1?r.cljs$core$IFn$_invoke$arity$1(c):r.call(null,c):c},c)};