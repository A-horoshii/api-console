goog.provide("clojure.set"),goog.require("cljs.core"),clojure.set.bubble_max_key=function(e,c){var r=cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,e,c);return cljs.core.cons(r,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(function(e){return function(c){return e===c}}(r),c))},clojure.set.union=function(e){for(var c=[],r=arguments.length,n=0;;){if(!(n<r))break;c.push(arguments[n]);n=n+1}switch(c.length){case 0:return clojure.set.union.cljs$core$IFn$_invoke$arity$0();case 1:return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);default:var o=new cljs.core.IndexedSeq(c.slice(2),0,null);return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0],arguments[1],o)}},clojure.set.union.cljs$core$IFn$_invoke$arity$0=function(){return cljs.core.PersistentHashSet.EMPTY},clojure.set.union.cljs$core$IFn$_invoke$arity$1=function(e){return e},clojure.set.union.cljs$core$IFn$_invoke$arity$2=function(e,c){return cljs.core.count(e)<cljs.core.count(c)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,c,e):cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,e,c)},clojure.set.union.cljs$core$IFn$_invoke$arity$variadic=function(e,c,r){var n=clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(r,c,cljs.core.array_seq([e],0)));return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(n),cljs.core.rest(n))},clojure.set.union.cljs$lang$applyTo=function(e){var c=cljs.core.first(e),r=cljs.core.next(e),n=cljs.core.first(r),o=cljs.core.next(r);return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(c,n,o)},clojure.set.union.cljs$lang$maxFixedArity=2,clojure.set.intersection=function(e){for(var c=[],r=arguments.length,n=0;;){if(!(n<r))break;c.push(arguments[n]);n=n+1}switch(c.length){case 1:return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);default:var o=new cljs.core.IndexedSeq(c.slice(2),0,null);return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0],arguments[1],o)}},clojure.set.intersection.cljs$core$IFn$_invoke$arity$1=function(e){return e},clojure.set.intersection.cljs$core$IFn$_invoke$arity$2=function(e,c){for(;;){if(!(cljs.core.count(c)<cljs.core.count(e)))return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,c){return function(e,r){return cljs.core.contains_QMARK_(c,r)?e:cljs.core.disj.cljs$core$IFn$_invoke$arity$2(e,r)}}(0,c),e,e);var r=c,n=e;e=r,c=n}},clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic=function(e,c,r){var n=clojure.set.bubble_max_key(function(e){return-cljs.core.count(e)},cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(r,c,cljs.core.array_seq([e],0)));return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(n),cljs.core.rest(n))},clojure.set.intersection.cljs$lang$applyTo=function(e){var c=cljs.core.first(e),r=cljs.core.next(e),n=cljs.core.first(r),o=cljs.core.next(r);return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(c,n,o)},clojure.set.intersection.cljs$lang$maxFixedArity=2,clojure.set.difference=function(e){for(var c=[],r=arguments.length,n=0;;){if(!(n<r))break;c.push(arguments[n]);n=n+1}switch(c.length){case 1:return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);default:var o=new cljs.core.IndexedSeq(c.slice(2),0,null);return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0],arguments[1],o)}},clojure.set.difference.cljs$core$IFn$_invoke$arity$1=function(e){return e},clojure.set.difference.cljs$core$IFn$_invoke$arity$2=function(e,c){return cljs.core.count(e)<cljs.core.count(c)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,r){return cljs.core.contains_QMARK_(c,r)?cljs.core.disj.cljs$core$IFn$_invoke$arity$2(e,r):e},e,e):cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,e,c)},clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic=function(e,c,r){return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,e,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(r,c))},clojure.set.difference.cljs$lang$applyTo=function(e){var c=cljs.core.first(e),r=cljs.core.next(e),n=cljs.core.first(r),o=cljs.core.next(r);return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(c,n,o)},clojure.set.difference.cljs$lang$maxFixedArity=2,clojure.set.select=function(e,c){return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(c,r){return cljs.core.truth_(e.cljs$core$IFn$_invoke$arity$1?e.cljs$core$IFn$_invoke$arity$1(r):e.call(null,r))?c:cljs.core.disj.cljs$core$IFn$_invoke$arity$2(c,r)},c,c)},clojure.set.project=function(e,c){return cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(e){return cljs.core.select_keys(e,c)},e))},clojure.set.rename_keys=function(e,c){return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(c,r){var n=r,o=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,0,null),t=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,1,null);return cljs.core.contains_QMARK_(e,o)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,t,cljs.core.get.cljs$core$IFn$_invoke$arity$2(e,o)):c},cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,e,cljs.core.keys(c)),c)},clojure.set.rename=function(e,c){return cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(e){return clojure.set.rename_keys(e,c)},e))},clojure.set.index=function(e,c){return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,r){var n=cljs.core.select_keys(r,c);return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(e,n,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(e,n,cljs.core.PersistentHashSet.EMPTY),r))},cljs.core.PersistentArrayMap.EMPTY,e)},clojure.set.map_invert=function(e){return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,c){var r=c,n=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(r,0,null),o=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(r,1,null);return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(e,o,n)},cljs.core.PersistentArrayMap.EMPTY,e)},clojure.set.join=function(e){for(var c=[],r=arguments.length,n=0;;){if(!(n<r))break;c.push(arguments[n]);n=n+1}switch(c.length){case 2:return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);case 3:return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0],arguments[1],arguments[2]);default:throw new Error([cljs.core.str("Invalid arity: "),cljs.core.str(c.length)].join(""))}},clojure.set.join.cljs$core$IFn$_invoke$arity$2=function(e,c){if(cljs.core.seq(e)&&cljs.core.seq(c)){var r=clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(e))),cljs.core.set(cljs.core.keys(cljs.core.first(c)))),n=cljs.core.count(e)<=cljs.core.count(c)?new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[e,c],null):new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[c,e],null),o=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,0,null),t=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,1,null),$=clojure.set.index(o,r);return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,c,r,n,o){return function(c,r){var n=function(){var c=cljs.core.select_keys(r,e);return o.cljs$core$IFn$_invoke$arity$1?o.cljs$core$IFn$_invoke$arity$1(c):o.call(null,c)}();return cljs.core.truth_(n)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,c,n,o,t,$){return function(e,c){return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(e,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([c,r],0)))}}(),c,n):c}}(r,0,0,0,$),cljs.core.PersistentHashSet.EMPTY,t)}return cljs.core.PersistentHashSet.EMPTY},clojure.set.join.cljs$core$IFn$_invoke$arity$3=function(e,c,r){var n=cljs.core.count(e)<=cljs.core.count(c)?new cljs.core.PersistentVector(null,3,5,cljs.core.PersistentVector.EMPTY_NODE,[e,c,clojure.set.map_invert(r)],null):new cljs.core.PersistentVector(null,3,5,cljs.core.PersistentVector.EMPTY_NODE,[c,e,r],null),o=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,0,null),t=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,1,null),$=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(n,2,null),s=clojure.set.index(o,cljs.core.vals($));return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,c,r,n,o){return function(e,c){var r=function(){var e=clojure.set.rename_keys(cljs.core.select_keys(c,cljs.core.keys(n)),n);return o.cljs$core$IFn$_invoke$arity$1?o.cljs$core$IFn$_invoke$arity$1(e):o.call(null,e)}();return cljs.core.truth_(r)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(e,r,n,o,t,$){return function(e,r){return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(e,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([r,c],0)))}}(),e,r):e}}(0,0,0,$,s),cljs.core.PersistentHashSet.EMPTY,t)},clojure.set.join.cljs$lang$maxFixedArity=3,clojure.set.subset_QMARK_=function(e,c){return cljs.core.count(e)<=cljs.core.count(c)&&cljs.core.every_QMARK_(function(e){return cljs.core.contains_QMARK_(c,e)},e)},clojure.set.superset_QMARK_=function(e,c){return cljs.core.count(e)>=cljs.core.count(c)&&cljs.core.every_QMARK_(function(c){return cljs.core.contains_QMARK_(e,c)},c)};