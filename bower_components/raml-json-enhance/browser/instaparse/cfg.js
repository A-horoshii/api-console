goog.provide("instaparse.cfg"),goog.require("cljs.core"),goog.require("instaparse.combinators_source"),goog.require("instaparse.reduction"),goog.require("instaparse.gll"),goog.require("clojure.string"),goog.require("cljs.reader"),instaparse.cfg._STAR_case_insensitive_literals_STAR_=!1,instaparse.cfg.single_quoted_string=/'[^'\\]*(?:\\.[^'\\]*)*'/,instaparse.cfg.single_quoted_regexp=/#'[^'\\]*(?:\\.[^'\\]*)*'/,instaparse.cfg.double_quoted_string=/\"[^\"\\]*(?:\\.[^\"\\]*)*\"/,instaparse.cfg.double_quoted_regexp=/#\"[^\"\\]*(?:\\.[^\"\\]*)*\"/,instaparse.cfg.inside_comment=/(?:(?!(?:\(\*|\*\)))[\s\S])*/,instaparse.cfg.ws="[,\\s]*",instaparse.cfg.opt_whitespace=instaparse.combinators_source.hide(instaparse.combinators_source.nt(cljs.core.cst$kw$opt_DASH_whitespace)),instaparse.cfg.cfg=instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$hiccup,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$neg,cljs.core.cst$kw$cat,cljs.core.cst$kw$ord,cljs.core.cst$kw$rule_DASH_separator,cljs.core.cst$kw$alt,cljs.core.cst$kw$look,cljs.core.cst$kw$rule,cljs.core.cst$kw$nt,cljs.core.cst$kw$hide_DASH_nt,cljs.core.cst$kw$inside_DASH_comment,cljs.core.cst$kw$star,cljs.core.cst$kw$string,cljs.core.cst$kw$rules,cljs.core.cst$kw$hide,cljs.core.cst$kw$paren,cljs.core.cst$kw$alt_DASH_or_DASH_ord,cljs.core.cst$kw$regexp,cljs.core.cst$kw$factor,cljs.core.cst$kw$comment,cljs.core.cst$kw$plus,cljs.core.cst$kw$epsilon,cljs.core.cst$kw$opt_DASH_whitespace,cljs.core.cst$kw$opt],[instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("!")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$factor)],0)),instaparse.combinators_source.plus(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.cfg.opt_whitespace,instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$factor),instaparse.combinators_source.nt(cljs.core.cst$kw$look),instaparse.combinators_source.nt(cljs.core.cst$kw$neg)],0)),instaparse.cfg.opt_whitespace],0))),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$cat),instaparse.combinators_source.plus(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("/")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$cat)],0)))],0)),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string(":"),instaparse.combinators_source.string(":="),instaparse.combinators_source.string("::="),instaparse.combinators_source.string("=")],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$cat),instaparse.combinators_source.star(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("|")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$cat)],0)))],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("&")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$factor)],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$nt),instaparse.combinators_source.nt(cljs.core.cst$kw$hide_DASH_nt)],0)),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.nt(cljs.core.cst$kw$rule_DASH_separator)),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$alt_DASH_or_DASH_ord),instaparse.combinators_source.hide(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$opt_DASH_whitespace),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$opt_DASH_whitespace),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string(";"),instaparse.combinators_source.string(".")],0)),instaparse.combinators_source.nt(cljs.core.cst$kw$opt_DASH_whitespace)],0))],0)))],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.neg(instaparse.combinators_source.nt(cljs.core.cst$kw$epsilon)),instaparse.combinators_source.regexp("[^, \\r\\t\\n<>(){}\\[\\]+*?:=|'\"#&!;./]+")],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("<")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$nt),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string(">"))],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.regexp(instaparse.cfg.inside_comment),instaparse.combinators_source.star(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$comment),instaparse.combinators_source.regexp(instaparse.cfg.inside_comment)],0)))],0)),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("{")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$alt_DASH_or_DASH_ord),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("}"))],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$factor),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("*"))],0))],0)),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.regexp(instaparse.cfg.single_quoted_string),instaparse.combinators_source.regexp(instaparse.cfg.double_quoted_string)],0)),instaparse.combinators_source.hide_tag(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.cfg.opt_whitespace,instaparse.combinators_source.plus(instaparse.combinators_source.nt(cljs.core.cst$kw$rule))],0))),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("<")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$alt_DASH_or_DASH_ord),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string(">"))],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("(")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$alt_DASH_or_DASH_ord),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string(")"))],0)),instaparse.combinators_source.hide_tag(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$alt),instaparse.combinators_source.nt(cljs.core.cst$kw$ord)],0))),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.regexp(instaparse.cfg.single_quoted_regexp),instaparse.combinators_source.regexp(instaparse.cfg.double_quoted_regexp)],0)),instaparse.combinators_source.hide_tag(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$nt),instaparse.combinators_source.nt(cljs.core.cst$kw$string),instaparse.combinators_source.nt(cljs.core.cst$kw$regexp),instaparse.combinators_source.nt(cljs.core.cst$kw$opt),instaparse.combinators_source.nt(cljs.core.cst$kw$star),instaparse.combinators_source.nt(cljs.core.cst$kw$plus),instaparse.combinators_source.nt(cljs.core.cst$kw$paren),instaparse.combinators_source.nt(cljs.core.cst$kw$hide),instaparse.combinators_source.nt(cljs.core.cst$kw$epsilon)],0))),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string("(*"),instaparse.combinators_source.nt(cljs.core.cst$kw$inside_DASH_comment),instaparse.combinators_source.string("*)")],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$factor),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("+"))],0)),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string("Epsilon"),instaparse.combinators_source.string("epsilon"),instaparse.combinators_source.string("EPSILON"),instaparse.combinators_source.string("eps"),instaparse.combinators_source.string("Îµ")],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.regexp(instaparse.cfg.ws),instaparse.combinators_source.star(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$comment),instaparse.combinators_source.regexp(instaparse.cfg.ws)],0)))],0)),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.hide(instaparse.combinators_source.string("[")),instaparse.cfg.opt_whitespace,instaparse.combinators_source.nt(cljs.core.cst$kw$alt_DASH_or_DASH_ord),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("]"))],0)),instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.nt(cljs.core.cst$kw$factor),instaparse.cfg.opt_whitespace,instaparse.combinators_source.hide(instaparse.combinators_source.string("?"))],0))],0))])),instaparse.cfg.tag=cljs.core.first,instaparse.cfg.contents=cljs.core.next,instaparse.cfg.content=cljs.core.fnext,instaparse.cfg.escape=function(r){for(var s=cljs.core.seq(r),c=cljs.core.PersistentVector.EMPTY;;){var e=cljs.core.first(s);if(!cljs.core.truth_(e))return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,c);var a=e;switch(a){case"\\":var t=cljs.core.second(s);if(cljs.core.truth_(t)){var o=t;if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(o,"'")){var n=cljs.core.drop.cljs$core$IFn$_invoke$arity$2(2,s),i=cljs.core.conj.cljs$core$IFn$_invoke$arity$2(c,o);s=n,c=i;continue}var $=cljs.core.drop.cljs$core$IFn$_invoke$arity$2(2,s),l=cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(c,a,cljs.core.array_seq([o],0));s=$,c=l;continue}throw[cljs.core.str("Encountered backslash character at end of string:"),cljs.core.str(r)].join("");case'"':var _=cljs.core.next(s),p=cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(c,"\\",cljs.core.array_seq(['"'],0));s=_,c=p;continue;default:var j=cljs.core.next(s),u=cljs.core.conj.cljs$core$IFn$_invoke$arity$2(c,a);s=j,c=u;continue}break}},instaparse.cfg.safe_read_string=function(r){return cljs.reader.read_string_STAR_(cljs.reader.push_back_reader(r),null)},instaparse.cfg.process_string=function(r){var s=cljs.core.subs.cljs$core$IFn$_invoke$arity$3(r,1,cljs.core.count(r)-1),c=instaparse.cfg.escape(s);return instaparse.cfg.safe_read_string([cljs.core.str(c),cljs.core.str('"')].join(""))},instaparse.cfg.process_regexp=function(r){var s=cljs.core.subs.cljs$core$IFn$_invoke$arity$3(r,2,cljs.core.count(r)-1),c=instaparse.cfg.escape(s);return cljs.core.re_pattern(c)},instaparse.cfg.build_rule=function r(s){for(;;){switch((instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.tag.call(null,s))instanceof cljs.core.Keyword?(instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.tag.call(null,s)).fqn:null){case"neg":return instaparse.combinators_source.neg(r(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"cat":return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.cat,cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.contents.call(null,s)));case"ord":return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.ord,cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.contents.call(null,s)));case"alt":return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.alt,cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.contents.call(null,s)));case"look":return instaparse.combinators_source.look(r(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"rule":var c=instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.contents.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.contents.call(null,s),e=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(c,0,null),a=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(c,1,null);return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1(e):instaparse.cfg.tag.call(null,e),cljs.core.cst$kw$hide_DASH_nt)?new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(function(){var r=instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(e):instaparse.cfg.content.call(null,e);return instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(r):instaparse.cfg.content.call(null,r)}()),instaparse.combinators_source.hide_tag(r(a))],null):new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(e):instaparse.cfg.content.call(null,e)),r(a)],null);case"nt":return instaparse.combinators_source.nt(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"star":return instaparse.combinators_source.star(r(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"string":return(cljs.core.truth_(instaparse.cfg._STAR_case_insensitive_literals_STAR_)?instaparse.combinators_source.string_ci:instaparse.combinators_source.string).call(null,instaparse.cfg.process_string(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"hide":return instaparse.combinators_source.hide(r(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"paren":s=instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s);continue;case"regexp":return instaparse.combinators_source.regexp(instaparse.cfg.process_regexp(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"plus":return instaparse.combinators_source.plus(r(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));case"epsilon":return instaparse.combinators_source.Epsilon;case"opt":return instaparse.combinators_source.opt(r(instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.content.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.content.call(null,s)));default:throw new Error([cljs.core.str("No matching clause: "),cljs.core.str(instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1?instaparse.cfg.tag.cljs$core$IFn$_invoke$arity$1(s):instaparse.cfg.tag.call(null,s))].join(""))}break}},instaparse.cfg.seq_nt=function r(s){for(;;){switch(cljs.core.cst$kw$tag.cljs$core$IFn$_invoke$arity$1(s)instanceof cljs.core.Keyword?cljs.core.cst$kw$tag.cljs$core$IFn$_invoke$arity$1(s).fqn:null){case"neg":s=cljs.core.cst$kw$parser.cljs$core$IFn$_invoke$arity$1(s);continue;case"cat":return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(r,cljs.core.array_seq([cljs.core.cst$kw$parsers.cljs$core$IFn$_invoke$arity$1(s)],0));case"ord":return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(r,cljs.core.array_seq([new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.cst$kw$parser1.cljs$core$IFn$_invoke$arity$1(s),cljs.core.cst$kw$parser2.cljs$core$IFn$_invoke$arity$1(s)],null)],0));case"alt":return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(r,cljs.core.array_seq([cljs.core.cst$kw$parsers.cljs$core$IFn$_invoke$arity$1(s)],0));case"look":s=cljs.core.cst$kw$parser.cljs$core$IFn$_invoke$arity$1(s);continue;case"nt":return new cljs.core.PersistentVector(null,1,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.cst$kw$keyword.cljs$core$IFn$_invoke$arity$1(s)],null);case"rep":s=cljs.core.cst$kw$parser.cljs$core$IFn$_invoke$arity$1(s);continue;case"star":s=cljs.core.cst$kw$parser.cljs$core$IFn$_invoke$arity$1(s);continue;case"string":case"regexp":return cljs.core.PersistentVector.EMPTY;case"plus":s=cljs.core.cst$kw$parser.cljs$core$IFn$_invoke$arity$1(s);continue;case"epsilon":case"string-ci":case"char":return cljs.core.PersistentVector.EMPTY;case"opt":s=cljs.core.cst$kw$parser.cljs$core$IFn$_invoke$arity$1(s);continue;default:throw new Error([cljs.core.str("No matching clause: "),cljs.core.str(cljs.core.cst$kw$tag.cljs$core$IFn$_invoke$arity$1(s))].join(""))}break}},instaparse.cfg.check_grammar=function(r){for(var s=cljs.core.set(cljs.core.keys(r)),c=cljs.core.seq(cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(instaparse.cfg.seq_nt,cljs.core.array_seq([cljs.core.vals(r)],0)))),e=null,a=0,t=0;;)if(t<a){var o=e.cljs$core$IIndexed$_nth$arity$2(null,t);if(!cljs.core.truth_(s.cljs$core$IFn$_invoke$arity$1?s.cljs$core$IFn$_invoke$arity$1(o):s.call(null,o)))throw[cljs.core.str(cljs.core.subs.cljs$core$IFn$_invoke$arity$2([cljs.core.str(o)].join(""),1)),cljs.core.str(" occurs on the right-hand side of your grammar, but not on the left")].join("");var n=c,i=e,$=a,l=t+1;c=n,e=i,a=$,t=l}else{var _=cljs.core.seq(c);if(!_)break;var p=_;if(cljs.core.chunked_seq_QMARK_(p)){var j=cljs.core.chunk_first(p),u=cljs.core.chunk_rest(p),g=j,k=cljs.core.count(j);c=u,e=g,a=k,t=0;continue}var f=cljs.core.first(p);if(!cljs.core.truth_(s.cljs$core$IFn$_invoke$arity$1?s.cljs$core$IFn$_invoke$arity$1(f):s.call(null,f)))throw[cljs.core.str(cljs.core.subs.cljs$core$IFn$_invoke$arity$2([cljs.core.str(f)].join(""),1)),cljs.core.str(" occurs on the right-hand side of your grammar, but not on the left")].join("");var m=cljs.core.next(p);c=m,e=null,a=0,t=0}return r},instaparse.cfg.build_parser=function(r,s){var c=instaparse.gll.parse(instaparse.cfg.cfg,cljs.core.cst$kw$rules,r,!1);if(c instanceof instaparse.gll.Failure)throw[cljs.core.str("Error parsing grammar specification:\n"),cljs.core.str(function(){var r=new goog.string.StringBuffer,s=cljs.core._STAR_print_newline_STAR_,e=cljs.core._STAR_print_fn_STAR_;cljs.core._STAR_print_newline_STAR_=!0,cljs.core._STAR_print_fn_STAR_=function(r,s,c,e){return function(r){return c.append(r)}}(0,0,r);try{cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([c],0))}finally{cljs.core._STAR_print_fn_STAR_=e,cljs.core._STAR_print_newline_STAR_=s}return[cljs.core.str(r)].join("")}())].join("");var e=cljs.core.map.cljs$core$IFn$_invoke$arity$2(instaparse.cfg.build_rule,c),a=cljs.core.first(cljs.core.first(e));return new cljs.core.PersistentArrayMap(null,3,[cljs.core.cst$kw$grammar,instaparse.cfg.check_grammar(instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(s,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,e))),cljs.core.cst$kw$start_DASH_production,a,cljs.core.cst$kw$output_DASH_format,s],null)},instaparse.cfg.build_parser_from_combinators=function(r,s,c){if(null==c)throw"When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument.";return new cljs.core.PersistentArrayMap(null,3,[cljs.core.cst$kw$grammar,instaparse.cfg.check_grammar(instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(s,r)),cljs.core.cst$kw$start_DASH_production,c,cljs.core.cst$kw$output_DASH_format,s],null)},instaparse.cfg.ebnf=function(r){if(cljs.core.truth_(cljs.core.re_find(/[:=]/,r))){var s=instaparse.gll.parse(instaparse.cfg.cfg,cljs.core.cst$kw$rules,r,!1);if(s instanceof instaparse.gll.Failure)throw[cljs.core.str("Error parsing grammar specification:\n"),cljs.core.str(function(){var r=new goog.string.StringBuffer,c=cljs.core._STAR_print_newline_STAR_,e=cljs.core._STAR_print_fn_STAR_;cljs.core._STAR_print_newline_STAR_=!0,cljs.core._STAR_print_fn_STAR_=function(r,s,c,e){return function(r){return c.append(r)}}(0,0,r);try{cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([s],0))}finally{cljs.core._STAR_print_fn_STAR_=e,cljs.core._STAR_print_newline_STAR_=c}return[cljs.core.str(r)].join("")}())].join("");return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(instaparse.cfg.build_rule,s))}var c=instaparse.gll.parse(instaparse.cfg.cfg,cljs.core.cst$kw$alt_DASH_or_DASH_ord,r,!1);if(c instanceof instaparse.gll.Failure)throw[cljs.core.str("Error parsing grammar specification:\n"),cljs.core.str(function(){var r=new goog.string.StringBuffer,s=cljs.core._STAR_print_newline_STAR_,e=cljs.core._STAR_print_fn_STAR_;cljs.core._STAR_print_newline_STAR_=!0,cljs.core._STAR_print_fn_STAR_=function(r,s,c,e){return function(r){return c.append(r)}}(0,0,r);try{cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([c],0))}finally{cljs.core._STAR_print_fn_STAR_=e,cljs.core._STAR_print_newline_STAR_=s}return[cljs.core.str(r)].join("")}())].join("");return instaparse.cfg.build_rule(cljs.core.first(c))};