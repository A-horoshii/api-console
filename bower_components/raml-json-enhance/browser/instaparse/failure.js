goog.provide("instaparse.failure"),goog.require("cljs.core"),goog.require("instaparse.print"),instaparse.failure.index__GT_line_column=function(r,e){for(var c=1,s=1,l=0;;){if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(r,l))return new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$line,c,cljs.core.cst$kw$column,s],null);if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2("\n",cljs.core.get.cljs$core$IFn$_invoke$arity$2(e,l))){var n=c+1,$=l+1;c=n,s=1,l=$}else{var o=c,i=s+1,a=l+1;c=o,s=i,l=a}}},instaparse.failure.newline_chars_QMARK_=function(r){return cljs.core.boolean$(new cljs.core.PersistentHashSet(null,new cljs.core.PersistentArrayMap(null,2,["\n",null,"\r",null],null),null).call(null,r))},instaparse.failure.get_line=function(r,e){for(var c=cljs.core.seq(clojure.string.replace(e,"\r\n","\n")),s=r;;){if(cljs.core.empty_QMARK_(c))return"";if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(s,1))return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(instaparse.failure.newline_chars_QMARK_),c));if(cljs.core.truth_(instaparse.failure.newline_chars_QMARK_(cljs.core.first(c)))){var l=cljs.core.next(c),n=s-1;c=l,s=n}else{var $=cljs.core.next(c),o=s;c=$,s=o}}},instaparse.failure.marker=function(r){return cljs.core.integer_QMARK_(r)?r<=1?"^":cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(r-1," "),new cljs.core.PersistentVector(null,1,5,cljs.core.PersistentVector.EMPTY_NODE,["^"],null))):null},instaparse.failure.augment_failure=function(r,e){var c=instaparse.failure.index__GT_line_column(cljs.core.cst$kw$index.cljs$core$IFn$_invoke$arity$1(r),e);return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([r,c,new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$text,instaparse.failure.get_line(cljs.core.cst$kw$line.cljs$core$IFn$_invoke$arity$1(c),e)],null)],0))},instaparse.failure.print_reason=function(r){return cljs.core.truth_(cljs.core.cst$kw$NOT.cljs$core$IFn$_invoke$arity$1(r))?(cljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["NOT "],0)),cljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.cst$kw$NOT.cljs$core$IFn$_invoke$arity$1(r)],0))):cljs.core.truth_(cljs.core.cst$kw$char_DASH_range.cljs$core$IFn$_invoke$arity$1(r))?cljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.print.char_range__GT_str(r)],0)):r instanceof RegExp?cljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.print.regexp__GT_str(r)],0)):cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([r],0))},instaparse.failure.pprint_failure=function(r){var e=r,c=null==e||!(64&e.cljs$lang$protocol_mask$partition0$||e.cljs$core$ISeq$)?e:cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,e),s=cljs.core.get.cljs$core$IFn$_invoke$arity$2(c,cljs.core.cst$kw$line),l=cljs.core.get.cljs$core$IFn$_invoke$arity$2(c,cljs.core.cst$kw$column),n=cljs.core.get.cljs$core$IFn$_invoke$arity$2(c,cljs.core.cst$kw$text),$=cljs.core.get.cljs$core$IFn$_invoke$arity$2(c,cljs.core.cst$kw$reason);cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Parse error at line",s,", column",l,":\n"],0)),cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([n],0)),cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.failure.marker(l)],0));var o=cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$expecting,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$full,$))),i=cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$expecting,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(cljs.core.cst$kw$full),$))),a=cljs.core.count(o)+cljs.core.count(i);0===a||(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(1,a)?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Expected:"],0)):cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(["Expected one of:"],0)));for(var t=cljs.core.seq(o),j=null,_=0,u=0;;)if(u<_){var v=j.cljs$core$IIndexed$_nth$arity$2(null,u);instaparse.failure.print_reason(v),cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([" (followed by end-of-string)"],0));var p=t,k=j,y=_,f=u+1;t=p,j=k,_=y,u=f}else{var I=cljs.core.seq(t);if(!I)break;var F=I;if(cljs.core.chunked_seq_QMARK_(F)){var d=cljs.core.chunk_first(F),w=cljs.core.chunk_rest(F),g=d,q=cljs.core.count(d);t=w,j=g,_=q,u=0;continue}var h=cljs.core.first(F);instaparse.failure.print_reason(h),cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([" (followed by end-of-string)"],0));var m=cljs.core.next(F);t=m,j=null,_=0,u=0}for(var x=cljs.core.seq(i),A=null,M=0,Q=0;;)if(Q<M){var E=A.cljs$core$IIndexed$_nth$arity$2(null,Q);instaparse.failure.print_reason(E),cljs.core.println();var P=x,R=A,T=M,K=Q+1;x=P,A=R,M=T,Q=K}else{var b=cljs.core.seq(x);if(!b)return null;var G=b;if(cljs.core.chunked_seq_QMARK_(G)){var N=cljs.core.chunk_first(G),O=cljs.core.chunk_rest(G),S=N,D=cljs.core.count(N);x=O,A=S,M=D,Q=0;continue}var E=cljs.core.first(G);instaparse.failure.print_reason(E),cljs.core.println();var H=cljs.core.next(G);x=H,A=null,M=0,Q=0}};