goog.provide("instaparse.abnf"),goog.require("cljs.core"),goog.require("instaparse.transform"),goog.require("instaparse.combinators_source"),goog.require("instaparse.gll"),goog.require("instaparse.cfg"),goog.require("instaparse.reduction"),goog.require("goog.string.format"),instaparse.abnf._STAR_case_insensitive_STAR_=!1,instaparse.abnf.abnf_core=cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$CRLF,cljs.core.cst$kw$HTAB,cljs.core.cst$kw$LWSP,cljs.core.cst$kw$LF,cljs.core.cst$kw$VCHAR,cljs.core.cst$kw$DIGIT,cljs.core.cst$kw$SP,cljs.core.cst$kw$HEXDIG,cljs.core.cst$kw$CTL,cljs.core.cst$kw$DQUOTE,cljs.core.cst$kw$WSP,cljs.core.cst$kw$CR,cljs.core.cst$kw$OCTET,cljs.core.cst$kw$ALPHA,cljs.core.cst$kw$CHAR,cljs.core.cst$kw$BIT],[instaparse.combinators_source.string("\r\n"),instaparse.combinators_source.string("\t"),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string(" "),instaparse.combinators_source.string("\t")],0)),instaparse.combinators_source.star(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string("\r\n"),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string(" "),instaparse.combinators_source.string("\t")],0))],0)))],0)),instaparse.combinators_source.string("\n"),instaparse.combinators_source.regexp("[\\u0021-\\u007E]"),instaparse.combinators_source.regexp("[0-9]"),instaparse.combinators_source.string(" "),instaparse.combinators_source.regexp("[0-9a-fA-F]"),instaparse.combinators_source.regexp("[\\u0000-\\u001F|\\u007F]"),instaparse.combinators_source.string('"'),instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.combinators_source.string(" "),instaparse.combinators_source.string("\t")],0)),instaparse.combinators_source.string("\r"),instaparse.combinators_source.regexp("[\\u0000-\\u00FF]"),instaparse.combinators_source.regexp("[a-zA-Z]"),instaparse.combinators_source.regexp("[\\u0001-\\u007F]"),instaparse.combinators_source.regexp("[01]")]),instaparse.abnf.abnf_grammar="\n<rulelist> = <opt-whitespace> (rule | hide-tag-rule)+;\nrule = rulename-left <defined-as> alternation <opt-whitespace>;\nhide-tag-rule = hide-tag <defined-as> alternation <opt-whitespace>;\nrulename-left = rulename;\nrulename-right = rulename;\n<rulename> = #'[a-zA-Z][-a-zA-Z0-9]*';\n<hide-tag> = <'<' opt-whitespace> rulename-left <opt-whitespace '>'>;\ndefined-as = <opt-whitespace> ('=' | '=/') <opt-whitespace>;\nalternation = concatenation (<opt-whitespace '/' opt-whitespace> concatenation)*;\nconcatenation = repetition (<whitespace> repetition)*;\nrepetition = [repeat] <opt-whitespace> element;\nrepeat = NUM | (NUM? '*' NUM?);\n<element> = rulename-right | group | hide | option | char-val | num-val\n          | look | neg | regexp;\nlook = <'&' opt-whitespace> element;\nneg = <'!' opt-whitespace> element;\n<group> = <'(' opt-whitespace> alternation <opt-whitespace ')'>;\noption = <'[' opt-whitespace> alternation <opt-whitespace ']'>;\nhide = <'<' opt-whitespace> alternation <opt-whitespace '>'>;\nchar-val = <'\\u0022'> #'[\\u0020-\\u0021\\u0023-\\u007E]'* <'\\u0022'> (* double-quoted strings *)\n         | <'\\u0027'> #'[\\u0020-\\u0026(-~]'* <'\\u0027'>;  (* single-quoted strings *)\n<num-val> = <'%'> (bin-val | dec-val | hex-val);\nbin-val = <'b'> bin-char\n          [ (<'.'> bin-char)+ | ('-' bin-char) ];\nbin-char = ('0' | '1')+;\ndec-val = <'d'> dec-char\n          [ (<'.'> dec-char)+ | ('-' dec-char) ];\ndec-char = DIGIT+;\nhex-val = <'x'> hex-char\n          [ (<'.'> hex-char)+ | ('-' hex-char) ];\nhex-char = HEXDIG+;\nNUM = DIGIT+;\n<DIGIT> = #'[0-9]';\n<HEXDIG> = #'[0-9a-fA-F]';\nopt-whitespace = #'\\s*(?:;.*?(?:\\u000D?\\u000A\\s*|$))*';\nwhitespace = #'\\s+(?:;.*?\\u000D?\\u000A\\s*)*';\nregexp = #\"#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n       | #\"#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\"\n",instaparse.abnf.format=function(r){for(var e=[],c=arguments.length,n=0;;){if(!(n<c))break;e.push(arguments[n]);var s=n+1;n=s}var a=1<e.length?new cljs.core.IndexedSeq(e.slice(1),0,null):null;return instaparse.abnf.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0],a)},instaparse.abnf.format.cljs$core$IFn$_invoke$arity$variadic=function(r,e){return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(goog.string.format,r,e)},instaparse.abnf.format.cljs$lang$maxFixedArity=1,instaparse.abnf.format.cljs$lang$applyTo=function(r){var e=cljs.core.first(r),c=cljs.core.next(r);return instaparse.abnf.format.cljs$core$IFn$_invoke$arity$variadic(e,c)},instaparse.abnf.get_char_combinator=function(r){for(var e=[],c=arguments.length,n=0;;){if(!(n<c))break;e.push(arguments[n]);var s=n+1;n=s}var a=0<e.length?new cljs.core.IndexedSeq(e.slice(0),0,null):null;return instaparse.abnf.get_char_combinator.cljs$core$IFn$_invoke$arity$variadic(a)},instaparse.abnf.get_char_combinator.cljs$core$IFn$_invoke$arity$variadic=function(r){if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2("-",cljs.core.second(r))){var e=r,c=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(e,0,null),n=(cljs.core.nth.cljs$core$IFn$_invoke$arity$3(e,1,null),cljs.core.nth.cljs$core$IFn$_invoke$arity$3(e,2,null));return instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2(c,n)}return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.cat,function(){var e=function r(e){return new cljs.core.LazySeq(null,function(){for(var c=e;;){var n=cljs.core.seq(c);if(n){var s=n;if(cljs.core.chunked_seq_QMARK_(s)){var a=cljs.core.chunk_first(s),t=cljs.core.count(a),o=cljs.core.chunk_buffer(t);return function(){for(var r=0;;){if(!(r<t))return!0;var e=cljs.core._nth.cljs$core$IFn$_invoke$arity$2(a,r);cljs.core.chunk_append(o,instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1(e));var c=r+1;r=c}}()?cljs.core.chunk_cons(cljs.core.chunk(o),r(cljs.core.chunk_rest(s))):cljs.core.chunk_cons(cljs.core.chunk(o),null)}var i=cljs.core.first(s);return cljs.core.cons(instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1(i),r(cljs.core.rest(s)))}return null}},null,null)};return e(r)}())},instaparse.abnf.get_char_combinator.cljs$lang$maxFixedArity=0,instaparse.abnf.get_char_combinator.cljs$lang$applyTo=function(r){return instaparse.abnf.get_char_combinator.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(r))},instaparse.abnf.project=function(r,e){return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,function(){var c=function e(c){return new cljs.core.LazySeq(null,function(){for(var n=c;;){var s=cljs.core.seq(n);{if(!s)return null;var a=s;if(cljs.core.chunked_seq_QMARK_(a)){var t=cljs.core.chunk_first(a),o=cljs.core.count(t),i=cljs.core.chunk_buffer(o);return function(){for(var e=0;;){if(!(e<o))return!0;var c=cljs.core._nth.cljs$core$IFn$_invoke$arity$2(t,e);if(cljs.core.contains_QMARK_(r,c)){cljs.core.chunk_append(i,new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[c,r.cljs$core$IFn$_invoke$arity$1?r.cljs$core$IFn$_invoke$arity$1(c):r.call(null,c)],null));var n=e+1;e=n}else{var s=e+1;e=s}}}()?cljs.core.chunk_cons(cljs.core.chunk(i),e(cljs.core.chunk_rest(a))):cljs.core.chunk_cons(cljs.core.chunk(i),null)}var l=cljs.core.first(a);if(cljs.core.contains_QMARK_(r,l))return cljs.core.cons(new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[l,r.cljs$core$IFn$_invoke$arity$1?r.cljs$core$IFn$_invoke$arity$1(l):r.call(null,l)],null),e(cljs.core.rest(a)));var $=cljs.core.rest(a);n=$}}},null,null)};return c(e)}())},instaparse.abnf.merge_core=function(r){return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([instaparse.abnf.project(instaparse.abnf.abnf_core,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(instaparse.cfg.seq_nt,cljs.core.array_seq([cljs.core.vals(r)],0)))),r],0))},instaparse.abnf.hide_tag_QMARK_=function(r){return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$red.cljs$core$IFn$_invoke$arity$1(r),instaparse.reduction.raw_non_terminal_reduction)},instaparse.abnf.alt_preserving_hide_tag=function(r,e){var c=instaparse.abnf.hide_tag_QMARK_(r),n=instaparse.abnf.hide_tag_QMARK_(e);return cljs.core.truth_(function(){var r=c;return cljs.core.truth_(r)?n:r}())?instaparse.combinators_source.hide_tag(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(r,cljs.core.cst$kw$red),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(e,cljs.core.cst$kw$red)],0))):cljs.core.truth_(c)?instaparse.combinators_source.hide_tag(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(r,cljs.core.cst$kw$red),e],0))):cljs.core.truth_(n)?instaparse.combinators_source.hide_tag(instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([r,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(e,cljs.core.cst$kw$red)],0))):instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([r,e],0))},instaparse.abnf.abnf_transformer=cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$neg,cljs.core.cst$kw$hide_DASH_tag_DASH_rule,cljs.core.cst$kw$look,cljs.core.cst$kw$bin_DASH_char,cljs.core.cst$kw$rule,cljs.core.cst$kw$rulename_DASH_right,cljs.core.cst$kw$NUM,cljs.core.cst$kw$char_DASH_val,cljs.core.cst$kw$hide,cljs.core.cst$kw$option,cljs.core.cst$kw$hex_DASH_char,cljs.core.cst$kw$bin_DASH_val,cljs.core.cst$kw$dec_DASH_val,cljs.core.cst$kw$concatenation,cljs.core.cst$kw$alternation,cljs.core.cst$kw$regexp,cljs.core.cst$kw$repetition,cljs.core.cst$kw$rulename_DASH_left,cljs.core.cst$kw$repeat,cljs.core.cst$kw$hex_DASH_val,cljs.core.cst$kw$dec_DASH_char],[instaparse.combinators_source.neg,function(r,e){return cljs.core.PersistentArrayMap.fromArray([r,instaparse.combinators_source.hide_tag(e)],!0,!1)},instaparse.combinators_source.look,function(){var r=function(r){var e=cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r),c=2;return parseInt(e,c)},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),cljs.core.hash_map,function(){var r=function(r){return cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)?instaparse.combinators_source.nt(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r)))):instaparse.combinators_source.nt(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r)))},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),function(){var r=function(r){var e=cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r);return parseInt(e)},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),function(){var r=function(r){return instaparse.combinators_source.string_ci(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r))},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),instaparse.combinators_source.hide,instaparse.combinators_source.opt,function(){var r=function(r){var e=cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r),c=16;return parseInt(e,c)},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),instaparse.abnf.get_char_combinator,instaparse.abnf.get_char_combinator,instaparse.combinators_source.cat,instaparse.combinators_source.alt,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.regexp,instaparse.cfg.process_regexp),function(){var r=null,e=function(r){return r},c=function(r,e){return cljs.core.empty_QMARK_(r)?instaparse.combinators_source.star(e):cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(r),2)?instaparse.combinators_source.rep(cljs.core.cst$kw$low.cljs$core$IFn$_invoke$arity$1(r),cljs.core.cst$kw$high.cljs$core$IFn$_invoke$arity$1(r),e):cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$low.cljs$core$IFn$_invoke$arity$1(r),1)?instaparse.combinators_source.plus(e):cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$high.cljs$core$IFn$_invoke$arity$1(r),1)?instaparse.combinators_source.opt(e):instaparse.combinators_source.rep(function(){var e=cljs.core.cst$kw$low.cljs$core$IFn$_invoke$arity$1(r);return cljs.core.truth_(e)?e:0}(),function(){var e=cljs.core.cst$kw$high.cljs$core$IFn$_invoke$arity$1(r);return cljs.core.truth_(e)?e:1/0}(),e)};return r=function(r,n){switch(arguments.length){case 1:return e.call(this,r);case 2:return c.call(this,r,n)}throw new Error("Invalid arity: "+arguments.length)},r.cljs$core$IFn$_invoke$arity$1=e,r.cljs$core$IFn$_invoke$arity$2=c,r}(),function(){var r=function(r){return cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)?cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r))):cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r))},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),function(){var r=function(r){var e=cljs.core.count(r);switch(e){case 1:return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(r),"*")?cljs.core.PersistentArrayMap.EMPTY:new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$low,cljs.core.first(r),cljs.core.cst$kw$high,cljs.core.first(r)],null);case 2:return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(r),"*")?new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$high,cljs.core.second(r)],null):new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$low,cljs.core.first(r)],null);case 3:return new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$low,cljs.core.first(r),cljs.core.cst$kw$high,cljs.core.nth.cljs$core$IFn$_invoke$arity$2(r,2)],null);default:throw new Error([cljs.core.str("No matching clause: "),cljs.core.str(cljs.core.count(r))].join(""))}},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}(),instaparse.abnf.get_char_combinator,function(){var r=function(r){var e=cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,r);return parseInt(e)},e=function(e){var c=null;if(arguments.length>0){for(var n=0,s=new Array(arguments.length-0);n<s.length;)s[n]=arguments[n+0],++n;c=new cljs.core.IndexedSeq(s,0)}return r.call(this,c)};return e.cljs$lang$maxFixedArity=0,e.cljs$lang$applyTo=function(e){var c=cljs.core.seq(e);return r(c)},e.cljs$core$IFn$_invoke$arity$variadic=r,e}()]),instaparse.abnf.abnf_parser=instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$hiccup,instaparse.cfg.ebnf(instaparse.abnf.abnf_grammar)),instaparse.abnf.rules__GT_grammar_map=function(r){return instaparse.abnf.merge_core(cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.merge_with,instaparse.abnf.alt_preserving_hide_tag,r))},instaparse.abnf.abnf=function(r){if(cljs.core.truth_(cljs.core.re_find(/=/,r))){var e=instaparse.gll.parse(instaparse.abnf.abnf_parser,cljs.core.cst$kw$rulelist,r,!1);if(e instanceof instaparse.gll.Failure)throw[cljs.core.str("Error parsing grammar specification:\n"),cljs.core.str(function(){var r=new goog.string.StringBuffer,c=cljs.core._STAR_print_newline_STAR_,n=cljs.core._STAR_print_fn_STAR_;cljs.core._STAR_print_newline_STAR_=!0,cljs.core._STAR_print_fn_STAR_=function(r,e,c,n){return function(r){return c.append(r)}}(c,n,r,e);try{cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([e],0))}finally{cljs.core._STAR_print_fn_STAR_=n,cljs.core._STAR_print_newline_STAR_=c}return[cljs.core.str(r)].join("")}())].join("");return instaparse.abnf.rules__GT_grammar_map(instaparse.transform.transform(instaparse.abnf.abnf_transformer,e))}var c=instaparse.gll.parse(instaparse.abnf.abnf_parser,cljs.core.cst$kw$alternation,r,!1);if(c instanceof instaparse.gll.Failure)throw[cljs.core.str("Error parsing grammar specification:\n"),cljs.core.str(function(){var r=new goog.string.StringBuffer,e=cljs.core._STAR_print_newline_STAR_,n=cljs.core._STAR_print_fn_STAR_;cljs.core._STAR_print_newline_STAR_=!0,cljs.core._STAR_print_fn_STAR_=function(r,e,c,n){return function(r){return c.append(r)}}(e,n,r,c);try{cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([c],0))}finally{cljs.core._STAR_print_fn_STAR_=n,cljs.core._STAR_print_newline_STAR_=e}return[cljs.core.str(r)].join("")}())].join("");return instaparse.transform.transform(instaparse.abnf.abnf_transformer,c)},instaparse.abnf.build_parser=function(r,e){var c=instaparse.gll.parse(instaparse.abnf.abnf_parser,cljs.core.cst$kw$rulelist,r,!1);if(c instanceof instaparse.gll.Failure)throw[cljs.core.str("Error parsing grammar specification:\n"),cljs.core.str(function(){var r=new goog.string.StringBuffer,e=cljs.core._STAR_print_newline_STAR_,n=cljs.core._STAR_print_fn_STAR_;cljs.core._STAR_print_newline_STAR_=!0,cljs.core._STAR_print_fn_STAR_=function(r,e,c,n){return function(r){return c.append(r)}}(e,n,r,c);try{cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([c],0))}finally{cljs.core._STAR_print_fn_STAR_=n,cljs.core._STAR_print_newline_STAR_=e}return[cljs.core.str(r)].join("")}())].join("");var n=instaparse.transform.transform(instaparse.abnf.abnf_transformer,c),s=instaparse.abnf.rules__GT_grammar_map(n),a=cljs.core.first(cljs.core.first(cljs.core.first(n)));return new cljs.core.PersistentArrayMap(null,3,[cljs.core.cst$kw$grammar,instaparse.cfg.check_grammar(instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(e,s)),cljs.core.cst$kw$start_DASH_production,a,cljs.core.cst$kw$output_DASH_format,e],null)};