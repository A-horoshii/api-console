goog.provide("instaparse.reduction"),goog.require("cljs.core"),goog.require("instaparse.auto_flatten_seq"),instaparse.reduction.singleton_QMARK_=function(e){return cljs.core.seq(e)&&cljs.core.not(cljs.core.next(e))},instaparse.reduction.red=function(e,c){return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(e,cljs.core.cst$kw$red,c)},instaparse.reduction.raw_non_terminal_reduction=new cljs.core.PersistentArrayMap(null,1,[cljs.core.cst$kw$reduction_DASH_type,cljs.core.cst$kw$raw],null),instaparse.reduction.HiccupNonTerminalReduction=function(e){return new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$reduction_DASH_type,cljs.core.cst$kw$hiccup,cljs.core.cst$kw$key,e],null)},instaparse.reduction.EnliveNonTerminalReduction=function(e){return new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$reduction_DASH_type,cljs.core.cst$kw$enlive,cljs.core.cst$kw$key,e],null)},instaparse.reduction.reduction_types=new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$hiccup,instaparse.reduction.HiccupNonTerminalReduction,cljs.core.cst$kw$enlive,instaparse.reduction.EnliveNonTerminalReduction],null),instaparse.reduction.node_builders=new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$enlive,function(e,c){return new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$tag,e,cljs.core.cst$kw$content,function(){var e=c;return cljs.core._conj(cljs.core.List.EMPTY,e)}()],null)},cljs.core.cst$kw$hiccup,function(e,c){return new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[e,c],null)}],null),instaparse.reduction.standard_non_terminal_reduction=cljs.core.cst$kw$hiccup,instaparse.reduction.apply_reduction=function(e,c){switch(cljs.core.cst$kw$reduction_DASH_type.cljs$core$IFn$_invoke$arity$1(e)instanceof cljs.core.Keyword?cljs.core.cst$kw$reduction_DASH_type.cljs$core$IFn$_invoke$arity$1(e).fqn:null){case"raw":return instaparse.auto_flatten_seq.conj_flat(instaparse.auto_flatten_seq.EMPTY,c);case"hiccup":return instaparse.auto_flatten_seq.convert_afs_to_vec(instaparse.auto_flatten_seq.conj_flat(instaparse.auto_flatten_seq.auto_flatten_seq(new cljs.core.PersistentVector(null,1,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.cst$kw$key.cljs$core$IFn$_invoke$arity$1(e)],null)),c));case"enlive":var r=instaparse.auto_flatten_seq.conj_flat(instaparse.auto_flatten_seq.EMPTY,c);return new cljs.core.PersistentArrayMap(null,2,[cljs.core.cst$kw$tag,cljs.core.cst$kw$key.cljs$core$IFn$_invoke$arity$1(e),cljs.core.cst$kw$content,0===cljs.core.count(r)?null:r],null);default:return e.cljs$core$IFn$_invoke$arity$1?e.cljs$core$IFn$_invoke$arity$1(c):e.call(null,c)}},instaparse.reduction.apply_standard_reductions=function(e){for(var c=[],r=arguments.length,n=0;;){if(!(n<r))break;c.push(arguments[n]);n=n+1}switch(c.length){case 1:return instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$1(arguments[0]);case 2:return instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(arguments[0],arguments[1]);default:throw new Error([cljs.core.str("Invalid arity: "),cljs.core.str(c.length)].join(""))}},instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$1=function(e){return instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2(instaparse.reduction.standard_non_terminal_reduction,e)},instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2=function(e,c){var r=instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1?instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1(e):instaparse.reduction.reduction_types.call(null,e);if(cljs.core.truth_(r)){var n=r;return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,function(){return function(e,c){return function c(r){return new cljs.core.LazySeq(null,function(e,n){return function(){for(var n=r;;){var t=cljs.core.seq(n);if(t){var s=t;if(cljs.core.chunked_seq_QMARK_(s)){var o=cljs.core.chunk_first(s),l=cljs.core.count(o),i=cljs.core.chunk_buffer(l);return function(){for(var c=0;;){if(!(c<l))return!0;var r=cljs.core._nth.cljs$core$IFn$_invoke$arity$2(o,c),n=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(r,0,null),t=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(r,1,null);cljs.core.chunk_append(i,cljs.core.truth_(cljs.core.cst$kw$red.cljs$core$IFn$_invoke$arity$1(t))?new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[n,t],null):new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[n,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(t,cljs.core.cst$kw$red,e.cljs$core$IFn$_invoke$arity$1?e.cljs$core$IFn$_invoke$arity$1(n):e.call(null,n))],null));c=c+1}}()?cljs.core.chunk_cons(cljs.core.chunk(i),c(cljs.core.chunk_rest(s))):cljs.core.chunk_cons(cljs.core.chunk(i),null)}var a=cljs.core.first(s),$=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(a,0,null),u=cljs.core.nth.cljs$core$IFn$_invoke$arity$3(a,1,null);return cljs.core.cons(cljs.core.truth_(cljs.core.cst$kw$red.cljs$core$IFn$_invoke$arity$1(u))?new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[$,u],null):new cljs.core.PersistentVector(null,2,5,cljs.core.PersistentVector.EMPTY_NODE,[$,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(u,cljs.core.cst$kw$red,e.cljs$core$IFn$_invoke$arity$1?e.cljs$core$IFn$_invoke$arity$1($):e.call(null,$))],null),c(cljs.core.rest(s)))}return null}}}(e),null,null)}}(n)(c)}())}throw[cljs.core.str("Invalid output format"),cljs.core.str(e),cljs.core.str(". Use :enlive or :hiccup.")].join("")},instaparse.reduction.apply_standard_reductions.cljs$lang$maxFixedArity=2;