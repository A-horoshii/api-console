goog.provide("instaparse.transform"),goog.require("cljs.core"),goog.require("instaparse.gll"),instaparse.transform.map_preserving_meta=function(r,e){return cljs.core.with_meta(cljs.core.map.cljs$core$IFn$_invoke$arity$2(r,e),cljs.core.meta(e))},instaparse.transform.merge_meta=function(r,e){return(null!=r?!!(262144&r.cljs$lang$protocol_mask$partition0$||r.cljs$core$IWithMeta$)||!r.cljs$lang$protocol_mask$partition0$&&cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,r):cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta,r))?instaparse.gll.merge_meta(r,e):r},instaparse.transform.enlive_transform=function r(e,c){var t=function(){var r=cljs.core.cst$kw$tag.cljs$core$IFn$_invoke$arity$1(c);return e.cljs$core$IFn$_invoke$arity$1?e.cljs$core$IFn$_invoke$arity$1(r):e.call(null,r)}();return cljs.core.truth_(t)?instaparse.transform.merge_meta(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(t,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,e),cljs.core.cst$kw$content.cljs$core$IFn$_invoke$arity$1(c))),cljs.core.meta(c)):cljs.core.truth_(cljs.core.cst$kw$tag.cljs$core$IFn$_invoke$arity$1(c))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,cljs.core.cst$kw$content,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,e),cljs.core.cst$kw$content.cljs$core$IFn$_invoke$arity$1(c))):c},instaparse.transform.hiccup_transform=function r(e,c){if(cljs.core.sequential_QMARK_(c)&&cljs.core.seq(c)){var t=function(){var r=cljs.core.first(c);return e.cljs$core$IFn$_invoke$arity$1?e.cljs$core$IFn$_invoke$arity$1(r):e.call(null,r)}();if(cljs.core.truth_(t)){var o=t;return instaparse.transform.merge_meta(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(o,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,e),cljs.core.next(c))),cljs.core.meta(c))}return cljs.core.with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null,1,5,cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.first(c)],null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,e),cljs.core.next(c))),cljs.core.meta(c))}return c},instaparse.transform.transform=function r(e,c){if(cljs.core.truth_(function(){var r=cljs.core.map_QMARK_(c);return r?cljs.core.cst$kw$tag.cljs$core$IFn$_invoke$arity$1(c):r}()))return instaparse.transform.enlive_transform(e,c);if(cljs.core.vector_QMARK_(c)&&cljs.core.first(c)instanceof cljs.core.Keyword)return instaparse.transform.hiccup_transform(e,c);if(cljs.core.sequential_QMARK_(c))return instaparse.transform.map_preserving_meta(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(r,e),c);if(c instanceof instaparse.gll.Failure)return c;throw"Invalid parse-tree, not recognized as either enlive or hiccup format."};